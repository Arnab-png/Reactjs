{"version":3,"sources":["logo.svg","components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Alert","alert","class","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","useState","text","setText","style","color","heading","onChange","event","console","log","target","value","backgroundColor","rows","newText","showAlert","copyText","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f3f6adff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">About</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        console.log(\"clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n    }\r\n    const handleClear = () => {\r\n        console.log(\"clear\");\r\n        setText('');\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"changed\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        console.log(\"copied\");\r\n        var copyText = document.getElementById(\"myBox\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        console.log(copyText);\r\n        props.showAlert(\"Text Copied\", \"success\");\r\n    }\r\n    const handleSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed Extra Spaces\", \"success\");\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" onChange={handleOnChange} value={text} style={{backgroundColor: props.mode==='dark'?'#343a40':'white', color: props.mode==='dark'?'white':'black'}} rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleSpace}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length - 1} words and {text.length} characters.</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to Preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport {useState} from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install Text Utils';\n      // }, 1500);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode'\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the Text to analyze\" mode={mode}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}